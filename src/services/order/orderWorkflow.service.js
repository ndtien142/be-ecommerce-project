'use strict';

const { BadRequestError, NotFoundError } = require('../../core/error.response');
const database = require('../../models');
const { toCamel } = require('../../utils/common.utils');
const EmailService = require('../email/email.service');
const MomoPaymentService = require('../payment/momo.service');
const OrderLogService = require('./orderLog.service');

/**
 * Service x·ª≠ l√Ω workflow ƒë∆°n h√†ng theo quy t·∫Øc:
 *
 * üîÑ COD (Thanh to√°n khi nh·∫≠n h√†ng):
 * pending_confirmation ‚Üí pending_pickup ‚Üí shipping ‚Üí delivered ‚Üí [payment completed]
 *
 * üîÑ MoMo (Thanh to√°n tr∆∞·ªõc):
 * pending_confirmation ‚Üí [payment completed] ‚Üí pending_pickup ‚Üí shipping ‚Üí delivered
 *
 * üö® Refund/Tr·∫£ h√†ng:
 * shipping/delivered ‚Üí returned ‚Üí [payment refunded if needed]
 */
class OrderWorkflowService {
    /**
     * X√°c nh·∫≠n ƒë∆°n h√†ng
     * - COD: pending_confirmation ‚Üí pending_pickup
     * - MoMo: pending_confirmation ‚Üí pending_pickup (ch·ªâ khi ƒë√£ thanh to√°n)
     */
    static async confirmOrder(
        orderId,
        actorId = null,
        actorName = null,
        note = null,
        ipAddress = null,
        userAgent = null,
    ) {
        const order = await database.Order.findByPk(orderId, {
            include: [
                {
                    model: database.OrderLineItem,
                    as: 'lineItems',
                    include: [{ model: database.Product, as: 'product' }],
                },
                { model: database.UserAddress, as: 'address' },
                { model: database.ShippingMethod, as: 'shippingMethod' },
                { model: database.Payment, as: 'payment' },
                { model: database.User, as: 'user' },
            ],
        });
        if (!order) {
            throw new NotFoundError('ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i');
        }

        const fromStatus = order.status;
        if (fromStatus !== 'pending_confirmation') {
            throw new BadRequestError('ƒê∆°n h√†ng kh√¥ng th·ªÉ x√°c nh·∫≠n');
        }

        // Ki·ªÉm tra ƒëi·ªÅu ki·ªán thanh to√°n
        if (order.payment && order.payment.payment_method === 'momo') {
            if (order.payment.status !== 'completed') {
                throw new BadRequestError(
                    'ƒê∆°n h√†ng MoMo ch∆∞a thanh to√°n kh√¥ng th·ªÉ x√°c nh·∫≠n',
                );
            }

            // N·∫øu ƒë√£ thanh to√°n nh∆∞ng ch∆∞a c√≥ log thanh to√°n th√¨ th√™m log th·ªß c√¥ng
            const paymentLog = await database.OrderLog.findOne({
                where: {
                    order_id: order.id,
                    action: 'payment_completed',
                },
            });
            if (!paymentLog) {
                ('Them paymen log thanh toan thu cong');
                await OrderLogService.createLog({
                    orderId: order.id,
                    fromStatus: 'pending_confirmation',
                    toStatus: 'pending_confirmation',
                    action: 'payment_completed',
                    actorType: 'system',
                    note: 'Th√™m log thanh to√°n th·ªß c√¥ng do thi·∫øu IPN',
                });
            }
        }

        const transaction = await database.sequelize.transaction();
        try {
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i
            order.status = 'pending_pickup';
            await order.save({ transaction });
            // T·∫°o log
            await OrderLogService.createLog({
                orderId,
                fromStatus,
                toStatus: 'pending_pickup',
                action: 'confirmed',
                actorType: 'admin',
                actorId,
                actorName,
                note,
                ipAddress,
                userAgent,
                transaction, // Truy·ªÅn transaction v√†o
            });

            await transaction.commit();
            // Send order confirmation email
            try {
                if (order.user && order.user.user_email) {
                    await EmailService.sendOrderConfirmationEmail(
                        order.user.user_email,
                        order.user.user_nickname || order.user.user_login,
                        order,
                        true,
                    );
                }
            } catch (emailError) {
                console.error(
                    'Failed to send order confirmation email:',
                    emailError,
                );
                // Don't throw error - email failure shouldn't break order creation
            }

            // Reload order ƒë·ªÉ c√≥ d·ªØ li·ªáu m·ªõi nh·∫•t sau commit
            await order.reload();
            return order;
        } catch (error) {
            // Ch·ªâ rollback n·∫øu transaction ch∆∞a ƒë∆∞·ª£c commit/rollback
            if (!transaction.finished) {
                await transaction.rollback();
            }
            throw error;
        }
    }

    /**
     * Shipper l·∫•y h√†ng
     * pending_pickup ‚Üí shipping
     */
    static async pickupOrder(
        orderId,
        trackingNumber = null,
        shippedBy = null,
        actorId = null,
        actorName = null,
        note = null,
        ipAddress = null,
        userAgent = null,
    ) {
        const order = await database.Order.findByPk(orderId, {
            include: [
                {
                    model: database.User,
                    as: 'user',
                    attributes: [
                        'id',
                        'user_login',
                        'user_email',
                        'user_nickname',
                    ],
                },
            ],
        });

        if (!order) {
            throw new NotFoundError('ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i');
        }

        const fromStatus = order.status;
        if (fromStatus !== 'pending_pickup') {
            throw new BadRequestError('ƒê∆°n h√†ng kh√¥ng th·ªÉ l·∫•y h√†ng');
        }

        const transaction = await database.sequelize.transaction();
        try {
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† th√¥ng tin giao h√†ng
            order.status = 'shipping';
            order.shipped_date = new Date();
            if (trackingNumber) order.tracking_number = trackingNumber;
            if (shippedBy) order.shipped_by = shippedBy;
            await order.save({ transaction });

            // T·∫°o log
            await OrderLogService.createLog({
                orderId,
                fromStatus,
                toStatus: 'shipping',
                action: 'picked_up',
                actorType: 'shipper',
                actorId,
                actorName: shippedBy || actorName,
                note,
                metadata: {
                    tracking_number: trackingNumber,
                    shipped_by: shippedBy,
                },
                ipAddress,
                userAgent,
                transaction, // Th√™m transaction
            });

            await transaction.commit();

            // Reload order ƒë·ªÉ c√≥ d·ªØ li·ªáu m·ªõi nh·∫•t sau commit
            await order.reload();

            // G·ª≠i email th√¥ng b√°o v·∫≠n chuy·ªÉn
            if (order.user && order.user.user_email) {
                try {
                    await EmailService.sendOrderStatusUpdateEmail(
                        order.user.user_email,
                        order.user.user_nickname || order.user.user_login,
                        order,
                        'shipping',
                    );
                    console.log(
                        `Shipping email sent to ${order.user.user_email} for order ${order.id}`,
                    );
                } catch (emailError) {
                    console.error('Failed to send shipping email:', emailError);
                    // Kh√¥ng throw error ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn flow ch√≠nh
                }
            }

            return order;
        } catch (error) {
            // Ch·ªâ rollback n·∫øu transaction ch∆∞a ƒë∆∞·ª£c commit/rollback
            if (!transaction.finished) {
                await transaction.rollback();
            }
            throw error;
        }
    }

    /**
     * Giao h√†ng th√†nh c√¥ng (shipper x√°c nh·∫≠n)
     * shipping ‚Üí delivered
     */
    static async deliverOrder(
        orderId,
        actorId = null,
        actorName = null,
        note = null,
        ipAddress = null,
        userAgent = null,
    ) {
        const order = await database.Order.findByPk(orderId, {
            include: [
                {
                    model: database.Payment,
                    as: 'payment',
                },
                {
                    model: database.User,
                    as: 'user',
                    attributes: [
                        'id',
                        'user_login',
                        'user_email',
                        'user_nickname',
                    ],
                },
            ],
        });

        if (!order) {
            throw new NotFoundError('ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i');
        }

        const fromStatus = order.status;
        if (fromStatus !== 'shipping') {
            throw new BadRequestError('ƒê∆°n h√†ng kh√¥ng th·ªÉ giao');
        }

        const transaction = await database.sequelize.transaction();
        try {
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
            order.status = 'delivered';
            order.delivered_date = new Date();
            await order.save({ transaction });

            // T·∫°o log
            await OrderLogService.createLog({
                orderId,
                fromStatus,
                toStatus: 'delivered',
                action: 'delivered',
                actorType: 'shipper',
                actorId,
                actorName,
                note,
                ipAddress,
                userAgent,
                transaction, // Th√™m transaction
            });

            await transaction.commit();

            // Reload order ƒë·ªÉ c√≥ d·ªØ li·ªáu m·ªõi nh·∫•t sau commit
            await order.reload();

            // // G·ª≠i email th√¥ng b√°o giao h√†ng th√†nh c√¥ng
            // if (order.user && order.user.user_email) {
            //     try {
            //         await EmailService.sendOrderStatusUpdateEmail(
            //             order.user.user_email,
            //             order.user.user_nickname || order.user.user_login,
            //             order,
            //             'delivered',
            //         );
            //         console.log(
            //             `Delivery email sent to ${order.user.user_email} for order ${order.id}`,
            //         );
            //     } catch (emailError) {
            //         console.error('Failed to send delivery email:', emailError);
            //         // Kh√¥ng throw error ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn flow ch√≠nh
            //     }
            // }

            return order;
        } catch (error) {
            // Ch·ªâ rollback n·∫øu transaction ch∆∞a ƒë∆∞·ª£c commit/rollback
            if (!transaction.finished) {
                await transaction.rollback();
            }
            throw error;
        }
    }

    /**
     * Shipper n·ªôp ti·ªÅn COD
     * Ch·ªâ cho COD: delivered ‚Üí payment completed
     */
    static async completeCODPayment(
        orderId,
        actorId = null,
        actorName = null,
        note = null,
        ipAddress = null,
        userAgent = null,
    ) {
        const order = await database.Order.findByPk(orderId, {
            include: [{ model: database.Payment, as: 'payment' }],
        });

        if (!order) {
            throw new NotFoundError('ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i');
        }

        if (order.status !== 'delivered') {
            throw new BadRequestError(
                'ƒê∆°n h√†ng ch∆∞a giao kh√¥ng th·ªÉ thu ti·ªÅn COD',
            );
        }

        if (!order.payment || order.payment.payment_method !== 'cash') {
            throw new BadRequestError('ƒê∆°n h√†ng kh√¥ng ph·∫£i COD');
        }

        if (order.payment.status === 'completed') {
            throw new BadRequestError('ƒê∆°n h√†ng ƒë√£ thu ti·ªÅn r·ªìi');
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
        order.payment.status = 'completed';
        order.payment.paid_at = new Date();
        await order.payment.save();

        // Th√™m log cho ho√†n t·∫•t COD
        await OrderLogService.createLog({
            orderId: order.id,
            fromStatus: order.status,
            toStatus: order.status,
            action: 'cod_completed',
            actorType: actorId ? 'admin' : 'system',
            actorId,
            actorName,
            note,
            metadata: {
                payment_method: 'cash',
                amount: order.payment.amount,
            },
            ipAddress,
            userAgent,
        });

        // Reload order ƒë·ªÉ c√≥ d·ªØ li·ªáu m·ªõi nh·∫•t
        await order.reload();
        return order;
    }

    /**
     * Tr·∫£ h√†ng / Kh√¥ng nh·∫≠n h√†ng
     * shipping/delivered ‚Üí returned
     * T·ª± ƒë·ªông x·ª≠ l√Ω refund n·∫øu c·∫ßn
     */
    static async returnOrder(
        orderId,
        reason = null,
        actorId = null,
        actorName = null,
        ipAddress = null,
        userAgent = null,
    ) {
        const order = await database.Order.findByPk(orderId, {
            include: [{ model: database.Payment, as: 'payment' }],
        });

        if (!order) {
            throw new NotFoundError('ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i');
        }

        if (!['shipping', 'delivered'].includes(order.status)) {
            throw new BadRequestError('ƒê∆°n h√†ng kh√¥ng th·ªÉ tr·∫£ h√†ng');
        }

        const transaction = await database.sequelize.transaction();
        try {
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
            const fromStatus = order.status;
            order.status = 'returned';
            if (reason)
                order.note = (order.note || '') + `\nL√Ω do tr·∫£ h√†ng: ${reason}`;
            await order.save({ transaction });

            // T·∫°o log tr·∫£ h√†ng
            await OrderLogService.createLog({
                orderId: order.id,
                fromStatus,
                toStatus: 'returned',
                action: 'returned',
                actorType: actorId ? 'customer' : 'admin',
                actorId,
                actorName,
                note: reason,
                ipAddress,
                userAgent,
                transaction,
            });

            // X·ª≠ l√Ω refund n·∫øu ƒë√£ thanh to√°n
            if (order.payment && order.payment.status === 'completed') {
                if (order.payment.payment_method === 'momo') {
                    // Refund MoMo
                    try {
                        await MomoPaymentService.refundTransaction(
                            order.payment.transaction_id,
                            order.payment.amount,
                            `Ho√†n ti·ªÅn ƒë∆°n h√†ng ${order.id} - ${reason || 'Tr·∫£ h√†ng'}`,
                        );

                        order.payment.status = 'refunded';
                        await order.payment.save({ transaction });

                        // Log refund
                        await OrderLogService.createLog({
                            orderId: order.id,
                            fromStatus: 'returned',
                            toStatus: 'returned',
                            action: 'refunded',
                            actorType: 'system',
                            note: 'Ho√†n ti·ªÅn MoMo khi tr·∫£ h√†ng',
                            metadata: {
                                refund_amount: order.payment.amount,
                                payment_method: 'momo',
                            },
                            transaction,
                        });
                    } catch (refundError) {
                        console.error('MoMo refund failed:', refundError);
                        throw new BadRequestError('Ho√†n ti·ªÅn MoMo th·∫•t b·∫°i');
                    }
                } else if (order.payment.payment_method === 'cash') {
                    // COD ƒë√£ thu ti·ªÅn th√¨ ƒë√°nh d·∫•u c·∫ßn ho√†n ti·ªÅn th·ªß c√¥ng
                    order.payment.status = 'refunded';
                    await order.payment.save({ transaction });

                    // Log refund
                    await OrderLogService.createLog({
                        orderId: order.id,
                        fromStatus: 'returned',
                        toStatus: 'returned',
                        action: 'refunded',
                        actorType: 'system',
                        note: 'Ho√†n ti·ªÅn COD khi tr·∫£ h√†ng',
                        metadata: {
                            refund_amount: order.payment.amount,
                            payment_method: 'cash',
                        },
                        transaction,
                    });
                }
            }

            // Ho√†n l·∫°i stock s·∫£n ph·∫©m
            const orderItems = await database.OrderLineItem.findAll({
                where: { order_id: order.id },
                transaction,
            });

            for (const item of orderItems) {
                const product = await database.Product.findByPk(
                    item.product_id,
                    { transaction },
                );
                if (product) {
                    product.stock =
                        Number(product.stock) + Number(item.quantity);
                    product.sold = Math.max(
                        0,
                        Number(product.sold || 0) - Number(item.quantity),
                    );

                    // C·∫≠p nh·∫≠t inventory_type
                    if (product.stock <= 0) {
                        product.inventory_type = 'out_of_stock';
                    } else if (product.stock <= (product.min_stock || 0)) {
                        product.inventory_type = 'low_stock';
                    } else {
                        product.inventory_type = 'in_stock';
                    }
                    await product.save({ transaction });
                }
            }

            await transaction.commit();

            // Reload order ƒë·ªÉ c√≥ d·ªØ li·ªáu m·ªõi nh·∫•t sau commit
            await order.reload();
            return order;
        } catch (error) {
            // Ch·ªâ rollback n·∫øu transaction ch∆∞a ƒë∆∞·ª£c commit/rollback
            if (!transaction.finished) {
                await transaction.rollback();
            }
            throw error;
        }
    }

    /**
     * H·ªßy ƒë∆°n h√†ng
     * pending_confirmation/pending_pickup ‚Üí cancelled
     */
    static async cancelOrder(
        orderId,
        reason = null,
        actorId = null,
        actorName = null,
        ipAddress = null,
        userAgent = null,
    ) {
        const order = await database.Order.findByPk(orderId, {
            include: [
                {
                    model: database.Payment,
                    as: 'payment',
                },
                {
                    model: database.User,
                    as: 'user',
                    attributes: [
                        'id',
                        'user_login',
                        'user_email',
                        'user_nickname',
                    ],
                },
            ],
        });

        if (!order) {
            throw new NotFoundError('ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i');
        }

        if (
            !['pending_confirmation', 'pending_pickup'].includes(order.status)
        ) {
            throw new BadRequestError('ƒê∆°n h√†ng kh√¥ng th·ªÉ h·ªßy');
        }

        const transaction = await database.sequelize.transaction();
        try {
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
            const fromStatus = order.status;
            order.status = 'cancelled';
            if (reason)
                order.note = (order.note || '') + `\nL√Ω do h·ªßy: ${reason}`;
            await order.save({ transaction });

            // X√°c ƒë·ªãnh actorType: admin hay customer
            let actorType = 'admin';
            if (actorId && order.user && order.user.id === actorId) {
                actorType = 'customer';
            }

            // T·∫°o log h·ªßy ƒë∆°n
            await OrderLogService.createLog({
                orderId: order.id,
                fromStatus,
                toStatus: 'cancelled',
                action: 'cancelled',
                actorType,
                actorId,
                actorName,
                note: reason,
                ipAddress,
                userAgent,
                transaction,
            });

            // X·ª≠ l√Ω payment
            if (order.payment) {
                if (
                    order.payment.status === 'completed' &&
                    order.payment.payment_method === 'momo'
                ) {
                    // Refund MoMo n·∫øu ƒë√£ thanh to√°n
                    // try {
                    //     await MomoPaymentService.refundTransaction(
                    //         order.payment.transaction_id,
                    //         order.payment.amount,
                    //         `Ho√†n ti·ªÅn h·ªßy ƒë∆°n ${order.id} - ${reason || 'H·ªßy ƒë∆°n'}`,
                    //     );
                    //     order.payment.status = 'refunded';
                    // } catch (refundError) {
                    //     console.error('MoMo refund failed:', refundError);
                    //     order.payment.status = 'failed';
                    // }
                    order.payment.status = 'cancelled';
                } else {
                    order.payment.status = 'cancelled';
                }
                await order.payment.save({ transaction });
            }

            // Ho√†n l·∫°i stock s·∫£n ph·∫©m
            const orderItems = await database.OrderLineItem.findAll({
                where: { order_id: order.id },
                transaction,
            });

            for (const item of orderItems) {
                const product = await database.Product.findByPk(
                    item.product_id,
                    { transaction },
                );
                if (product) {
                    product.stock =
                        Number(product.stock) + Number(item.quantity);
                    product.sold = Math.max(
                        0,
                        Number(product.sold || 0) - Number(item.quantity),
                    );

                    // C·∫≠p nh·∫≠t inventory_type
                    if (product.stock <= 0) {
                        product.inventory_type = 'out_of_stock';
                    } else if (product.stock <= (product.min_stock || 0)) {
                        product.inventory_type = 'low_stock';
                    } else {
                        product.inventory_type = 'in_stock';
                    }
                    await product.save({ transaction });
                }
            }

            await transaction.commit();

            // Reload order ƒë·ªÉ c√≥ d·ªØ li·ªáu m·ªõi nh·∫•t sau commit
            await order.reload();

            // G·ª≠i email th√¥ng b√°o h·ªßy ƒë∆°n h√†ng
            if (order.user && order.user.user_email) {
                try {
                    await EmailService.sendOrderCancellationEmail(
                        order.user.user_email,
                        order.user.user_nickname || order.user.user_login,
                        order,
                        reason,
                    );
                    console.log(
                        `Cancellation email sent to ${order.user.user_email} for order ${order.id}`,
                    );
                } catch (emailError) {
                    console.error(
                        'Failed to send cancellation email:',
                        emailError,
                    );
                    // Kh√¥ng throw error ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn flow ch√≠nh
                }
            }

            return order;
        } catch (error) {
            // Ch·ªâ rollback n·∫øu transaction ch∆∞a ƒë∆∞·ª£c commit/rollback
            if (!transaction.finished) {
                await transaction.rollback();
            }
            throw error;
        }
    }

    /**
     * Kh√°ch h√†ng x√°c nh·∫≠n ƒë√£ nh·∫≠n h√†ng
     * delivered ‚Üí customer_confirmed
     */
    static async customerConfirmOrder(
        orderId,
        customerId,
        customerName = null,
        note = null,
        ipAddress = null,
        userAgent = null,
    ) {
        const order = await database.Order.findByPk(orderId, {
            include: [{ model: database.Payment, as: 'payment' }],
        });

        if (!order) {
            throw new NotFoundError('ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i');
        }

        // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu ƒë∆°n h√†ng
        if (order.user_id !== customerId) {
            throw new BadRequestError(
                'B·∫°n kh√¥ng c√≥ quy·ªÅn x√°c nh·∫≠n ƒë∆°n h√†ng n√†y',
            );
        }

        const fromStatus = order.status;
        if (fromStatus !== 'delivered') {
            throw new BadRequestError(
                'ƒê∆°n h√†ng ch∆∞a ƒë∆∞·ª£c giao kh√¥ng th·ªÉ x√°c nh·∫≠n',
            );
        }

        const transaction = await database.sequelize.transaction();
        try {
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
            order.status = 'customer_confirmed';
            order.customer_confirmed_date = new Date();
            await order.save({ transaction });

            // T·∫°o log
            await OrderLogService.createLog({
                orderId,
                fromStatus,
                toStatus: 'customer_confirmed',
                action: 'customer_confirmed',
                actorType: 'customer',
                actorId: customerId,
                actorName: customerName,
                note,
                ipAddress,
                userAgent,
                transaction, // Th√™m transaction
            });

            // N·∫øu l√† COD v√† ch∆∞a thu ti·ªÅn, t·ª± ƒë·ªông ƒë√°nh d·∫•u ƒë√£ thu ti·ªÅn
            if (
                order.payment &&
                order.payment.payment_method === 'cash' &&
                order.payment.status === 'pending'
            ) {
                order.payment.status = 'completed';
                order.payment.paid_at = new Date();
                await order.payment.save({ transaction });

                // T·∫°o log cho COD completion
                await OrderLogService.createLog({
                    orderId,
                    fromStatus: 'customer_confirmed',
                    toStatus: 'customer_confirmed',
                    action: 'cod_completed',
                    actorType: 'system',
                    note: 'T·ª± ƒë·ªông ho√†n t·∫•t COD khi kh√°ch h√†ng x√°c nh·∫≠n nh·∫≠n h√†ng',
                    metadata: {
                        payment_method: 'cash',
                        amount: order.payment.amount,
                    },
                    transaction, // Th√™m transaction
                });
            }

            await transaction.commit();

            // Reload order ƒë·ªÉ c√≥ d·ªØ li·ªáu m·ªõi nh·∫•t sau commit
            await order.reload();
            return order;
        } catch (error) {
            // Ch·ªâ rollback n·∫øu transaction ch∆∞a ƒë∆∞·ª£c commit/rollback
            if (!transaction.finished) {
                await transaction.rollback();
            }
            throw error;
        }
    }

    /**
     * L·∫•y workflow hi·ªán t·∫°i v√† c√°c h√†nh ƒë·ªông c√≥ th·ªÉ th·ª±c hi·ªán
     */
    static async getOrderWorkflow(orderId, userId) {
        const order = await database.Order.findByPk(orderId, {
            include: [{ model: database.Payment, as: 'payment' }],
        });

        if (!order) {
            throw new NotFoundError('ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i');
        }

        const foundUser = await database.User.findByPk(userId, {
            include: [{ model: database.Role, as: 'role' }],
        });

        console.log('user ID: -------', userId);
        console.log('foundUser: -------', foundUser);

        if (!foundUser) {
            throw new NotFoundError('Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i');
        }

        const workflow = {
            currentStatus: order.status,
            paymentStatus: order.payment?.status || 'pending',
            paymentMethod: order.payment?.payment_method || 'cash',
            availableActions: [],
        };

        // Ki·ªÉm tra n·∫øu ƒë√£ qu√° 3 ng√†y k·ªÉ t·ª´ khi giao h√†ng th√¨ kh√¥ng cho tr·∫£ h√†ng
        let canReturn = true;
        if (
            order.status === 'delivered' ||
            order.status === 'customer_confirmed'
        ) {
            const deliveredDate =
                order.delivered_date || order.customer_confirmed_date;
            if (deliveredDate) {
                const now = new Date();
                const diffMs = now - new Date(deliveredDate);
                const diffDays = diffMs / (1000 * 60 * 60 * 24);
                if (diffDays > 3) {
                    canReturn = false;
                }
            }
        }

        if (foundUser.role.name === 'admin') {
            // Admin c√≥ th·ªÉ th·ª±c hi·ªán t·∫•t c·∫£ h√†nh ƒë·ªông
            // X√°c ƒë·ªãnh c√°c h√†nh ƒë·ªông c√≥ th·ªÉ th·ª±c hi·ªán
            switch (order.status) {
                case 'pending_confirmation':
                    workflow.availableActions = ['confirm', 'cancel'];
                    break;
                case 'pending_pickup':
                    workflow.availableActions = ['pickup', 'cancel'];
                    break;
                case 'shipping':
                    workflow.availableActions = ['deliver', 'return'];
                    break;
                case 'delivered':
                    workflow.availableActions = [];
                    if (
                        order.payment?.payment_method === 'cash' &&
                        order.payment?.status === 'pending'
                    ) {
                        workflow.availableActions.push('complete_cod_payment');
                    }
                    break;
                case 'customer_confirmed':
                    if (canReturn) {
                        workflow.availableActions = ['return']; // V·∫´n c√≥ th·ªÉ tr·∫£ h√†ng trong th·ªùi gian nh·∫•t ƒë·ªãnh
                    }
                    break;
                case 'returned':
                case 'cancelled':
                    workflow.availableActions = []; // Kh√¥ng c√≥ h√†nh ƒë·ªông n√†o
                    break;
            }
        } else {
            // X√°c ƒë·ªãnh c√°c h√†nh ƒë·ªông c√≥ th·ªÉ th·ª±c hi·ªán
            switch (order.status) {
                case 'pending_confirmation':
                    if (order.payment?.payment_method !== 'momo') {
                        workflow.availableActions = ['cancel'];
                    }
                    break;
                case 'pending_pickup':
                    if (order.payment?.payment_method !== 'momo') {
                        workflow.availableActions = ['cancel'];
                    }
                    break;
                case 'shipping':
                    workflow.availableActions = [];
                    break;
                case 'delivered':
                    if (order.payment?.payment_method !== 'momo') {
                        workflow.availableActions = [
                            'customer_confirm',
                            'return',
                        ];
                    } else {
                        workflow.availableActions = ['customer_confirm'];
                    }
                    if (
                        order.payment?.payment_method === 'cash' &&
                        order.payment?.status === 'pending'
                    ) {
                        workflow.availableActions.push('complete_cod_payment');
                    }
                    break;
                case 'customer_confirmed':
                    workflow.availableActions = ['return']; // V·∫´n c√≥ th·ªÉ tr·∫£ h√†ng trong th·ªùi gian nh·∫•t ƒë·ªãnh
                    break;
                case 'returned':
                case 'cancelled':
                    workflow.availableActions = []; // Kh√¥ng c√≥ h√†nh ƒë·ªông n√†o
                    break;
            }
        }

        return workflow;
    }

    /**
     * L·∫•y th·ªëng k√™ ƒë∆°n h√†ng theo tr·∫°ng th√°i
     */
    static async getOrderStatistics() {
        const orderStats = await database.Order.findAll({
            attributes: [
                'status',
                [
                    database.sequelize.fn(
                        'COUNT',
                        database.sequelize.col('id'),
                    ),
                    'count',
                ],
            ],
            group: ['status'],
        });

        const paymentStats = await database.Payment.findAll({
            attributes: [
                'status',
                'payment_method',
                [
                    database.sequelize.fn(
                        'COUNT',
                        database.sequelize.col('id'),
                    ),
                    'count',
                ],
                [
                    database.sequelize.fn(
                        'SUM',
                        database.sequelize.col('amount'),
                    ),
                    'total_amount',
                ],
            ],
            group: ['status', 'payment_method'],
        });

        return {
            ordersByStatus: orderStats.map((stat) => ({
                status: stat.status,
                count: parseInt(stat.get('count')),
            })),
            paymentsByStatusAndMethod: paymentStats.map((stat) => ({
                status: stat.status,
                method: stat.payment_method,
                count: parseInt(stat.get('count')),
                totalAmount: parseFloat(stat.get('total_amount') || 0),
            })),
        };
    }
}

module.exports = OrderWorkflowService;
